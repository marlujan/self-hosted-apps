---
- name: Check Docker Compose Applications Status
  hosts: docker_apps
  become: yes
  gather_facts: no

  tasks:
    - name: Find all application directories
      find:
        paths: "/home/ec2-user/apps"
        file_type: directory
        depth: 1
      register: app_directories

    - name: Get app configurations
      set_fact:
        app_configs: "{{ app_configs | default([]) + [{'name': item.path | basename, 'path': item.path}] }}"
      loop: "{{ app_directories.files }}"

    - name: Check Docker Compose status for each app
      community.docker.docker_compose_v2:
        project_src: "{{ item.path }}"
        state: present
      become_user: ec2-user
      register: compose_status
      loop: "{{ app_configs }}"
      ignore_errors: yes

    - name: Load app configurations for detailed info
      include_vars:
        file: "../{{ item.name }}/app.yml"
        name: "app_config_{{ item.name }}"
      loop: "{{ app_configs }}"
      delegate_to: localhost
      ignore_errors: yes

    - name: Display application status summary
      debug:
        msg:
          - "üìä Docker Compose Applications Status"
          - "====================================="
          - "{% for result in compose_status.results %}"
          - "App: {{ result.item.name }}"
          - "Status: {{ 'Running ‚úÖ' if not result.failed else 'Failed ‚ùå' }}"
          - "Services: {{ result.services.keys() | list | join(', ') if result.services is defined else 'None' }}"
          - "Path: {{ result.item.path }}"
          - "Domain: {{ hostvars[inventory_hostname]['app_config_' + result.item.name].domain_name if hostvars[inventory_hostname]['app_config_' + result.item.name] is defined else 'Unknown' }}"
          - "-------------------------------------"
          - "{% endfor %}"
          - ""
          - "Total applications found: {{ app_configs | length }}"