AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Creates a cost-effective infrastructure for a single EC2 instance to run
  multiple Docker applications. Includes VPC, Subnet, IGW, Security Group, and an EC2 instance
  with a persistent EBS volume and an Elastic IP.

Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance.
  YourIP:
    Type: String
    Description: "Your personal IP address for secure SSH access (e.g., 203.0.113.1/32). This is a security best practice."
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: "Must be a valid IP address in CIDR notation (e.g., 203.0.113.1/32)."

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "EC2 Instance Configuration"
        Parameters:
          - KeyName
          - YourIP

Resources:
  # ------------------------------------------------------------#
  #  Networking
  # ------------------------------------------------------------#
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags: [{Key: Name, Value: !Sub '${AWS::StackName}-VPC'}]

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags: [{Key: Name, Value: !Sub '${AWS::StackName}-PublicSubnet'}]

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags: [{Key: Name, Value: !Sub '${AWS::StackName}-IGW'}]

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags: [{Key: Name, Value: !Sub '${AWS::StackName}-PublicRouteTable'}]

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  # ------------------------------------------------------------#
  #  S3 Storage
  # ------------------------------------------------------------#
  TwentyS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: migacloud-twenty
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-TwentyBucket'
        - Key: Application
          Value: Twenty

  TwentyS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref TwentyS3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub '${TwentyS3Bucket}/*'

  # ------------------------------------------------------------#
  #  IAM Role and Policies
  # ------------------------------------------------------------#
  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-EC2Role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref S3AccessPolicy
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-EC2Role'

  S3AccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyName: !Sub '${AWS::StackName}-S3Access'
      Description: 'Allows read, write, and list permissions for migacloud-twenty S3 bucket'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:PutObject
              - s3:DeleteObject
              - s3:ListBucket
            Resource:
              - !GetAtt TwentyS3Bucket.Arn
              - !Sub '${TwentyS3Bucket.Arn}/*'

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub '${AWS::StackName}-InstanceProfile'
      Roles:
        - !Ref EC2InstanceRole

  # ------------------------------------------------------------#
  #  EC2 Instance and Security
  # ------------------------------------------------------------#
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow SSH, HTTP, and HTTPS traffic"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref YourIP
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags: [{Key: Name, Value: !Sub '${AWS::StackName}-SG'}]

  AppServerInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro # AWS Free Tier eligible
      KeyName: !Ref KeyName
      # This uses a public SSM parameter to get the latest Amazon Linux 2023 AMI for the region.
      ImageId: '{{resolve:ssm:/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64}}'
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      SubnetId: !Ref PublicSubnet
      IamInstanceProfile: !Ref EC2InstanceProfile
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 20
            # Set to false to prevent data loss if you terminate the instance
            DeleteOnTermination: false
      Tags: [{Key: Name, Value: !Sub '${AWS::StackName}-Instance'}]

  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref AppServerInstance

Outputs:
  InstanceId:
    Description: "The Instance ID of the new EC2 instance"
    Value: !Ref AppServerInstance
  PublicIP:
    Description: "The Public IP address of the EC2 instance. Point your domains' A records here."
    Value: !Ref EIP
  PublicDNS:
    Description: "The Public DNS name of the EC2 instance"
    Value: !GetAtt AppServerInstance.PublicDnsName
  S3BucketName:
    Description: "The name of the S3 bucket for Twenty application storage"
    Value: !Ref TwentyS3Bucket
  S3BucketPublicURL:
    Description: "The public URL for accessing objects in the S3 bucket"
    Value: !Sub 'https://${TwentyS3Bucket}.s3.${AWS::Region}.amazonaws.com'